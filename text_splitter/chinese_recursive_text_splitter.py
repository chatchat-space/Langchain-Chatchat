import re
from typing import List, Optional, Any
from langchain.text_splitter import RecursiveCharacterTextSplitter
import logging

logger = logging.getLogger(__name__)


def _split_text_with_regex_from_end(
        text: str, separator: str, keep_separator: bool
) -> List[str]:
    # Now that we have the separator, split the text
    if separator:
        if keep_separator:
            # The parentheses in the pattern keep the delimiters in the result.
            _splits = re.split(f"({separator})", text)
            splits = ["".join(i) for i in zip(_splits[0::2], _splits[1::2])]
            if len(_splits) % 2 == 1:
                splits += _splits[-1:]
            # splits = [_splits[0]] + splits
        else:
            splits = re.split(separator, text)
    else:
        splits = list(text)
    return [s for s in splits if s != ""]


class ChineseRecursiveTextSplitter(RecursiveCharacterTextSplitter):
    def __init__(
            self,
            separators: Optional[List[str]] = None,
            keep_separator: bool = True,
            is_separator_regex: bool = True,
            **kwargs: Any,
    ) -> None:
        """Create a new TextSplitter."""
        super().__init__(keep_separator=keep_separator, **kwargs)
        self._separators = separators or [
            "\n\n",
            "\n",
            "。|！|？",
            "\.\s|\!\s|\?\s",
            "；|;\s",
            "，|,\s"
        ]
        self._is_separator_regex = is_separator_regex

    def _split_text(self, text: str, separators: List[str]) -> List[str]:
        """Split incoming text and return chunks."""
        final_chunks = []
        # Get appropriate separator to use
        separator = separators[-1]
        new_separators = []
        for i, _s in enumerate(separators):
            _separator = _s if self._is_separator_regex else re.escape(_s)
            if _s == "":
                separator = _s
                break
            if re.search(_separator, text):
                separator = _s
                new_separators = separators[i + 1:]
                break

        _separator = separator if self._is_separator_regex else re.escape(separator)
        splits = _split_text_with_regex_from_end(text, _separator, self._keep_separator)

        # Now go merging things, recursively splitting longer texts.
        _good_splits = []
        _separator = "" if self._keep_separator else separator
        for s in splits:
            if self._length_function(s) < self._chunk_size:
                _good_splits.append(s)
            else:
                if _good_splits:
                    merged_text = self._merge_splits(_good_splits, _separator)
                    final_chunks.extend(merged_text)
                    _good_splits = []
                if not new_separators:
                    final_chunks.append(s)
                else:
                    other_info = self._split_text(s, new_separators)
                    final_chunks.extend(other_info)
        if _good_splits:
            merged_text = self._merge_splits(_good_splits, _separator)
            final_chunks.extend(merged_text)
        return final_chunks


if __name__ == "__main__":
    text_splitter = ChineseRecursiveTextSplitter(
        keep_separator=True,
        is_separator_regex=True,
        chunk_size=50,
        chunk_overlap=0
    )
    ls = [
        """中国对外贸易形势报告（75页）。前 10 个月，一般贸易进出口 19.5 万亿元，增长 25.1%， 比整体进出口增速高出 2.9 个百分点，占进出口总额的 61.7%，较去年同期提升 1.6 个百分点。其中，一般贸易出口 10.6 万亿元，增长 25.3%，占出口总额的 60.9%，提升 1.5 个百分点；进口8.9万亿元，增长24.9%，占进口总额的62.7%， 提升 1.8 个百分点。加工贸易进出口 6.8 万亿元，增长 11.8%， 占进出口总额的 21.5%，减少 2.0 个百分点。其中，出口增 长 10.4%，占出口总额的 24.3%，减少 2.6 个百分点；进口增 长 14.2%，占进口总额的 18.0%，减少 1.2 个百分点。此外， 以保税物流方式进出口 3.96 万亿元，增长 27.9%。其中，出 口 1.47 万亿元，增长 38.9%；进口 2.49 万亿元，增长 22.2%。前三季度，中国服务贸易继续保持快速增长态势。服务 进出口总额 37834.3 亿元，增长 11.6%；其中服务出口 17820.9 亿元，增长 27.3%；进口 20013.4 亿元，增长 0.5%，进口增 速实现了疫情以来的首次转正。服务出口增幅大于进口 26.8 个百分点，带动服务贸易逆差下降 62.9%至 2192.5 亿元。服 务贸易结构持续优化，知识密集型服务进出口 16917.7 亿元， 增长 13.3%，占服务进出口总额的比重达到 44.7%，提升 0.7 个百分点。 二、中国对外贸易发展环境分析和展望 全球疫情起伏反复，经济复苏分化加剧，大宗商品价格 上涨、能源紧缺、运力紧张及发达经济体政策调整外溢等风 险交织叠加。同时也要看到，我国经济长期向好的趋势没有 改变，外贸企业韧性和活力不断增强，新业态新模式加快发 展，创新转型步伐提速。产业链供应链面临挑战。美欧等加快出台制造业回迁计 划，加速产业链供应链本土布局，跨国公司调整产业链供应 链，全球双链面临新一轮重构，区域化、近岸化、本土化、 短链化趋势凸显。疫苗供应不足，制造业“缺芯”、物流受限、 运价高企，全球产业链供应链面临压力。 全球通胀持续高位运行。能源价格上涨加大主要经济体 的通胀压力，增加全球经济复苏的不确定性。世界银行今年 10 月发布《大宗商品市场展望》指出，能源价格在 2021 年 大涨逾 80%，并且仍将在 2022 年小幅上涨。IMF 指出，全 球通胀上行风险加剧，通胀前景存在巨大不确定性。""",
        """01哲学类
哲学类下设哲学、逻辑学、宗教学、伦理学等几个专业。哲学是一门研究人生终极意义和宇宙万物本源的学科，强调批判性思维和理性思考能力的培养。哲学是公认的就业困难的专业，造成这一现象的根本原因在于哲学的本科教育与行业体系难以衔接，没有直接对口的就业岗位。
毕业生的就业方向主要有以下几个：（1）教育科研单位：如到高校、研究所、政策研究机构做研究，一般需要继续深造；或者到中小学、培训机构当老师，在校期间最好能考下教师资格证。（2）政府机关：哲学专业毕业生思考问题的独特性和深刻性还是很受相关政府机关欢迎的，通过考公务员可以进入各级政府机关（如党校、宣传部、组织部、政府办等）工作。（3）新闻出版单位：新闻出版需要有广博的知识储备、优良的文笔和口才，哲学专业的学生常常能够从独特的思考角度切入事件进行写作，所以也很受新闻出版单位的欢迎。
（4）企业：可以在大中型企业从事行政、党建、企划、文案、人力资源、秘书、管理等工作
02经济学类
经济学门类下有经济学、财政学、金融学、经济与贸易等几类。热门专业包括：经济学、金融学、金融工程、国际经济与贸易等。
本次高校本科专业目录增加了：金融审计专业。
经济学专业的就业方向主要是政府经济管理部门、政策研究部门、金融机构和大中型企业的经济分析和规划部门。金融学和金融工程专业毕业生主要就业去向是各金融监管部门（中国人民银行、银监会、保监会、证监会）和银行、证券、保险、基金等金融机构。金融工程相关岗位更侧重利用计算机工具建模来做金融产品的量化分析，需要毕业生有较好的数学基础。
国际经济与贸易专业的学生毕业后可在涉外经济贸易部门及外贸企业的经营与管理岗位就业，如从事跟单员、国际货物运输代理、报关员，及其他相关业务或管理工作。""",
        """香港2017年年中人口为7391700人
香港2016年年中人口为7336600人
香港2015年年中人口为7291300人
香港2014年年中人口为7229500人
香港2017年0-14岁人口比重为11.49％
香港2016年0-14岁人口比重为11.21％
香港2015年0-14岁人口比重为11.18％
香港2014年0-14岁人口比重为11.06％
香港2013年0-14岁人口比重为11.13％
香港2011年0-14岁人口比重为11.65％
香港2010年0-14岁人口比重为11.94％
香港2017年15-64岁人口比重为72.21％
香港2016年15-64岁人口比重为73.02％
香港2015年15-64岁人口比重为73.60％
香港2014年15-64岁人口比重为74.24％
香港2013年15-64岁人口比重为74.69％
香港2012年15-64岁人口比重为74.96％
香港2011年15-64岁人口比重为75.08％
香港2010年15-64岁人口比重为75.09％""",
        """范县水厂压力计，今日压力：0.1Mpa昨天：0.3Mpa2023-08-09 12:32:32 0.2Mpa2023-08-10 12:32:32 0.2Mpa""",
        """3.1 一般规定
3.1.1 建筑防烟系统的设计应根据建筑高度、使用性质等因素，采用自然通风系统或机械加压送风系统。
3.1.2 建筑高度大于50m的公共建筑、工业建筑和建筑高度大于100m的住宅建筑，其防烟楼梯间、独立前室、共用前室、合用前室及消防电梯前室应采用机械加压送风系统。
3.1.3 建筑高度小于或等于50m的公共建筑、工业建筑和建筑高度小于或等于100m的住宅建筑，其防烟楼梯间、独立前室、共用前室、合用前室（除共用前室与消防电梯前室合用外）及消防电梯前室应采用自然通风系统；当不能设置自然通风系统时，应采用机械加压送风系统。防烟系统的选择，尚应符合下列规定：
1 当独立前室或合用前室满足下列条件之一时，楼梯间可不设置防烟系统：
1）采用全敞开的阳台或凹廊；
2）设有两个及以上不同朝向的可开启外窗，且独立前室两个外窗面积分别不小于2.0m2，合用前室两个外窗面积分别不小于3.0m2。
2 当独立前室、共用前室及合用前室的机械加压送风口设置在前室的顶部或正对前室入口的墙面时，楼梯间可采用自然通风系统；当机械加压送风口未设置在前室的顶部或正对前室入口的墙面时，楼梯间应采用机械加压送风系统。
3 当防烟楼梯间在裙房高度以上部分采用自然通风时，不具备自然通风条件的裙房的独立前室、共用前室及合用前室应采用机械加压送风系统，且独立前室、共用前室及合用前室送风口的设置方式应符合本条第2款的规定。
条文说明：3.1.3 对于建筑高度小于或等于50m的公共建筑、工业建筑和建筑高度小于或等于100m的住宅建筑，由于这些建筑受风压作用影响较小，且一般不设火灾自动报警系统，利用建筑本身的采光通风也可基本起到防止烟气进一步进入安全区域的作用，因此建议防烟楼梯间、前室均采用自然通风方式的防烟系统，简便易行。当楼梯间、前室不能采用自然通风方式时，其设计应根据各自的通风条件，选用标准给出的相应的机械加压送风方式。考虑到安全性，共用前室与消防电梯前室合用时宜采用机械加压送风方式的防烟系统。 1 当采用全敞开的凹廊、阳台作为防烟楼梯间的前室、合用前室，或者防烟楼梯间前室、合用前室具有两个不同朝向的可开启外窗且可开启窗面积符合本标准第3.2.2条的规定时，可以认为前室、合用前室自然通风性能优良，能及时排出从走道漏入前室、合用前室的烟气并可防止烟气进入防烟楼梯间，因此可以仅在前室设置防烟设施，楼梯间不设。 2 在一些建筑中，楼梯间设有满足自然通风的可开启外窗，但其前室无外窗，要使烟气不进入防烟楼梯间，就必须对前室增设机械加压送风系统，并且对送风口的位置提出严格要求。将前室的机械加压送风口设置在前室的顶部，其目的是为了形成有效阻隔烟气的风幕；而将送风口设在正对前室入口的墙面上，是为了形成正面阻挡烟气侵入前室的效果。当前室的加压送风口的设置不符合上述规定时，其楼梯间就必须设置机械加压送风系统。 3 在建筑高度小于或等于50m的公共建筑、工业建筑和建筑高度小于或等于100m的住宅建筑中，在建筑布置时，可能会出现裙房高度以上部分利用可开启外窗进行自然通风，裙房高度范围内不具备自然通风条件的布局，为了保证防烟楼梯间下部的安全并且不影响其上部，对该高层建筑中不具备自然通风条件的前室、共用前室及合用前室，规定设置局部正压送风系统。其送风口的设置方式也应按照本标准第3.1.3条第2款的要求，设置在前室的顶部或将送风口设在正对前室入口的墙面上。
3.1.4 建筑地下部分的防烟楼梯间前室及消防电梯前室，当无自然通风条件或自然通风不符合要求时，应采用机械加压送风系统。
3.1.5 防烟楼梯间及其前室的机械加压送风系统的设置应符合下列规定：
1 建筑高度小于或等于50m的公共建筑、工业建筑和建筑高度小于或等于100m的住宅建筑，当采用独立前室且其仅有一个门与走道或房间相通时，可仅在楼梯间设置机械加压送风系统；当独立前室有多个门时，楼梯间、独立前室应分别独立设置机械加压送风系统。
2 当采用合用前室时，楼梯间、合用前室应分别独立设置机械加压送风系统。
3 当采用剪刀楼梯时，其两个楼梯间及其前室的机械加压送风系统应分别独立设置。
3.1.6 封闭楼梯间应采用自然通风系统，不能满足自然通风条件的封闭楼梯间，应设置机械加压送风系统。当地下、半地下建筑（室）的封闭楼梯间不与地上楼梯间共用且地下仅为一层时，可不设置机械加压送风系统，但首层应设置有效面积不小于1.2m2的可开启外窗或直通室外的疏散门。
条文说明：3.1.6 封闭楼梯间也是火灾时人员疏散的通道，当楼梯间没有设置可开启外窗时或开窗面积达不到标准规定的面积时，进入楼梯间的烟气就无法有效排除，影响人员疏散，这时就应在楼梯间设置机械加压送风进行防烟。对于设在地下的封闭楼梯间，当其服务的地下室层数仅为1层且最底层地坪与室外地坪高差小于10m时，为体现经济合理的建设要求，只要在其首层设置了直接开向室外的门或设有不小于1.2m2的可开启外窗即可。
3.1.7 设置机械加压送风系统的场所，楼梯间应设置常开风口，前室应设置常闭风口；火灾时其联动开启方式应符合本标准第5.1.3条的规定。
3.1.8 避难层的防烟系统可根据建筑构造、设备布置等因素选择自然通风系统或机械加压送风系统。
3.1.9 避难走道应在其前室及避难走道分别设置机械加压送风系统，但下列情况可仅在前室设置机械加压送风系统：
1 避难走道一端设置安全出口，且总长度小于30m；
2 避难走道两端设置安全出口，且总长度小于60m。
条文说明：3.1.9 避难走道多用作解决大型建筑中疏散距离过长，或难以按照标准要求设置直通室外的安全出口等问题。疏散时人员只要进入避难走道，就视作进入相对安全的区域。为了严防烟气侵袭避难走道，需要在前室和避难走道分别设置机械加压送风系统。对于疏散距离在30m以内的避难走道，由于疏散距离较短，可仅在前室设置机械加压送风系统。"""
        ]
    # text = """"""
    for inum, text in enumerate(ls):
        print(inum)
        chunks = text_splitter.split_text(text)
        for chunk in chunks:
            print(chunk)
